(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
angular.module('ui.bootstrap.buttons', [])

.constant('buttonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('btnRadio', function () {
  return {
    require: ['btnRadio', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function () {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
            ngModelCtrl.$render();
          });
        }
      });
    }
  };
})

.directive('btnCheckbox', function () {
  return {
    require: ['btnCheckbox', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attributeValue, defaultValue) {
        var val = scope.$eval(attributeValue);
        return angular.isDefined(val) ? val : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

},{}],2:[function(require,module,exports){
var templates = require('./templates.js');
require('../../node_modules/angular-ui-bootstrap/src/buttons/buttons.js');

angular.module('allSeating', ['btford.modal', 'templateCache', 'ui.bootstrap.buttons'])
	.constant('directoryConfig', {
		"imageFiles": {
			"cushionShading": "./assets/images/cushion-shading/",
			"swatches": "./assets/images/swatches/"
		}
	})
	.constant('chairConfig', {
		"hardware": [{
			"type": "arms",
			"displayName": "Arms",
			"directory": "images/chair-hardware/arms/",
			"options": [{
				"displayName": "Arms 1",
				"fileName": "arms-1.png"
			}, {
				"displayName": "Arms 2",
				"fileName": "arms-2.png"
			}, {
				"displayName": "Arms 3",
				"fileName": "arms-3.png"
			}]
		}, {
			"type": "bases",
			"displayName": "Bases",
			"directory": "images/chair-hardware/bases/",
			"options": [{
				"displayName": "Base 1",
				"fileName": "base-1.png"
			}, {
				"displayName": "Base 2",
				"fileName": "base-2.png"
			}, {
				"displayName": "Base 3",
				"fileName": "base-3.png"
			}]
		}],
		"swatches": [{
			"displayName": "Azurean",
			"fileName": 'azurean.jpg',
		}, {
			"displayName": "Cayenne",
			"fileName": 'cayenne.jpg'
		}, {
			"displayName": "Galaxy",
			"fileName": 'galaxy.jpg'
		}, {
			"displayName": "Ginger",
			"fileName": 'ginger.jpg'
		}, {
			"displayName": "Pimento",
			"fileName": 'pimento.jpg'
		}, {
			"displayName": "Slate",
			"fileName": 'slate.jpg'
		}, {
			"displayName": "Walnut",
			"fileName": 'walnut.jpg'
		}],
		"cushions": [{
			"type": "backRestCushion",
			"shadingFileName": "back-rest-cushion-shading.png",
			"drawInstructions": {
				"center": [359, 201],
				"centerGlobal": [360, 360],
				"moveTo": '254 321',
				"bezierCurveTo": [
					'254 321 228 129 230 102',
					'232 77 274 86 306 88',
					'338 90 398 89 431 83',
					'463 77 476 84 482 89',
					'482 89 489 95 487 120',
					'485 145 471 312 468 319',
					'468 319 377 312 254 321'
				]
			}
		}, {
			"type": "seatCushion",
			"shadingFileName": "seat-cushion-shading.png",
			"drawInstructions": {
				"center": [359, 360],
				"centerGlobal": [360, 360],
				"moveTo": '255 322',
				"bezierCurveTo": [
					'255 322 323 310 465 319',
					'485 320 492 329 496 340',
					'499 348 501 366 498 376',
					'496 385 444 403 394 405',
					'325 408 281 403 236 392',
					'236 392 221 389 217 378',
					'213 367 220 346 222 341',
					'224 337 230 325 255 322'
				]
			}
		}]
	})
	.constant('cushionOffset', {
		"xOff": -108,
		"yOff": 8
	})
	.factory('myModal', ['btfModal', '$templateCache', function (btfModal, $templateCache) {
		return btfModal({
			controller: ['$scope', 'myModal', function ($scope, myModal) {
				$scope.name = 'World';
				$scope.closeMe = function () {
					console.log($scope);
					myModal.deactivate();
				};
			}],
			template: $templateCache.get('builder-summary-modal')
		});
	}])
	.directive('swatch', [function () {
		return {
			scope: {
				swatch: "=",
				scale: "="
			},
			link: function (scope, elem) {
				var swatchSize = scope.swatch.width * (scope.scale || 1);
				elem[0].getContext('2d').drawImage(scope.swatch, 0, 0, swatchSize, swatchSize);
			}
		};
	}])
	.controller('ChairBuilderCtrl', ['$scope', 'chairConfig', 'myModal', function ($scope, chairConfig, myModal) {

		var self = this;

		function Cushion() {}

		Cushion.prototype = {
			assemble: function (config) {
				var self = this,
					shadingImg = new Image(),
					dataCurve = 'M' + config.drawInstructions.moveTo + 'C',
					scale = (canvasSpecs.width / 2) / config.drawInstructions.center[0];

				this.layer = new Kinetic.FastLayer();

				angular.forEach(config.drawInstructions.bezierCurveTo, function (config) {
					dataCurve = dataCurve.concat(config + ' ');
				});
				dataCurve = dataCurve.concat('z');

				this.cushionPath = new Kinetic.Path({
					visible: false,
					offsetX: config.drawInstructions.center[0],
					offsetY: config.drawInstructions.center[1],
					x: canvasSpecs.width / 2,
					y: config.drawInstructions.center[1],
					data: dataCurve
				});
				this.layer.add(this.cushionPath).draw();

				shadingImg.onload = function () {
					self.shading = new Kinetic.Image({
						visible: false,
						offsetX: shadingImg.width / 2,
						offsetY: shadingImg.height / 2,
						x: canvasSpecs.width / 2,
						y: config.drawInstructions.center[1],
						image: shadingImg
					});
					self.layer.add(self.shading).draw();
				};
				shadingImg.src = 'images/cushion-shading/' + config.shadingFileName;

				return this.layer;
			},
			fillCushion: function (swatch) {
				console.log(swatch);
				this.cushionPath.fillPatternImage(swatch.image).visible(true);
				this.shading.visible(true);
				this.layer.draw();
			}
		};

		var chairPrototype = {
			addCushions: function (config) {
				angular.forEach(config, function (val) {
					var cushion = new Cushion();
					this.stage.add(cushion.assemble(val));
					this.cushions[val.type] = cushion;
				}, this);
			},
			loadSwatch: function (swatch) {
				angular.forEach(this.cushions, function (val) {
					val.fillCushion(swatch);
				});
			},
			addHardware: function (config) {
				angular.forEach(config, function (val) {
					var hardware = new Kinetic.FastLayer();
					this.stage.add(hardware);
					this.hardware[val.type] = hardware;
				}, this);
			},
			changeHardware: function (type, hardware) {
				var img = new Kinetic.Image({
					image: hardware.image,
					offsetX: hardware.image.width / 2,
					offsetY: hardware.image.height / 2,
					x: canvasSpecs.width / 2,
					y: canvasSpecs.height / 2
				});
				this.hardware[type].visible(true).removeChildren().add(img);
				if (type == 'bases') {
					img.y(img.y() + 163);
				}
				this.hardware[type].draw();
			},
			init: function (config) {
				this.addHardware(config.hardware);
				this.addCushions(config.cushions);
			}
		};

		function Chair(stage) {
			this.stage = stage;
			this.cushions = {};
			this.hardware = {};
		}

		Chair.prototype = chairPrototype;

		$scope.selection = {};

		$scope.showModal = function () {
			var modal = {};
			myModal.activate(modal).then(function () {
				modal.$scope.selection = $scope.selection;
			});
		};

		var canvasSpecs = {
			container: 'chair-canvas',
			width: 500,
			height: 700
		};

		var stage = new Kinetic.Stage(canvasSpecs);
		var chairXYZ = new Chair(stage);
		chairXYZ.init({
			cushions: chairConfig.cushions,
			hardware: chairConfig.hardware
		});

		$scope.activeChair = chairXYZ;

		$scope.swatches = [];
		$scope.arms = [];
		$scope.bases = [];

		$scope.readout = function (foo, callback, val) {
			if (foo) {
				$scope.activeChair[callback](val);
			}
		};

		var addOption = function (destination, directory, scale) {
			return function (value) {
				var img = new Image();
				img.onload = function () {
					$scope.$apply(function () {
						value.image = img;
						value.scale = scale;
						value.imported = directory ? false : true;
						destination.push(value);
					});
				};
				img.src = (directory || '').concat(value.fileName);
			};
		};

		$scope.loadSwatchUrl = function (swatchUrl) {
			addOption($scope.swatches)({
				fileName: swatchUrl
			});
		};

		$scope.removeSwatch = function (swatch) {
			swatch.hide = true;
		};

		$scope.swatchUrl = '';

		var loadOptions = function (options, callback) {
			options.forEach(function (val) {
				callback(val);
			});
		};

		loadOptions(chairConfig.swatches, addOption($scope.swatches, 'images/swatches/', 0.5));
		loadOptions(chairConfig.hardware[0].options, addOption($scope.arms, 'images/chair-hardware/arms/', 0.3));
		loadOptions(chairConfig.hardware[1].options, addOption($scope.bases, 'images/chair-hardware/bases/', 0.3));
	}])
	.directive('dragdrop', [function () {
		return {
			scope: {
				file: "=",
				fileName: '=',
				onFileDrop: '&'
			},
			restrict: 'A',
			link: function (scope, element, attrs, controller) {
				var checkSize, isTypeValid, processDragOverOrEnter, validMimeTypes;
				processDragOverOrEnter = function (event) {
					if (event !== null) {
						event.preventDefault();
					}
					event.dataTransfer.effectAllowed = 'copy';
					return false;
				};
				validMimeTypes = attrs.fileDropzone;
				checkSize = function (size) {
					var ref;
					if (((ref = attrs.maxFileSize) === (void 0) || ref === '') || (size / 1024) / 1024 < attrs.maxFileSize) {
						return true;
					} else {
						alert("File must be smaller than " + attrs.maxFileSize + " MB");
						return false;
					}
				};
				isTypeValid = function (type) {
					if ((validMimeTypes === (void 0) || validMimeTypes === '') || validMimeTypes.indexOf(type) > -1) {
						return true;
					} else {
						alert("Invalid file type.  File must be one of following types " + validMimeTypes);
						return false;
					}
				};
				element.bind('dragover', processDragOverOrEnter);
				element.bind('dragenter', processDragOverOrEnter);
				element.bind('drop', function (event) {
					var file, name, reader, size, type;
					if (event !== null) {
						event.preventDefault();
					}
					reader = new FileReader();
					reader.onload = function (evt) {
						if (checkSize(size) && isTypeValid(type)) {
							return scope.$apply(function () {
								scope.file = evt.target.result;
								scope.onFileDrop()(scope.file);
								if (angular.isString(scope.fileName)) {
									scope.fileName = name;
									return scope.fileName;
								}
							});
						}
					};
					file = event.dataTransfer.files[0];
					name = file.name;
					type = file.type;
					size = file.size;
					reader.readAsDataURL(file);
					return false;
				});
			}
		};
	}]);

},{"../../node_modules/angular-ui-bootstrap/src/buttons/buttons.js":1,"./templates.js":3}],3:[function(require,module,exports){
angular.module("templateCache", []).
run(['$templateCache', function($templateCache) {
  $templateCache.put('builder-summary-modal',  '<div class="modal-backdrop"><div class="modal"><table class="u-full-width"><thead><tr><th>Option</th><th>Selection</th></tr></thead><tbody><tr><td>Swatch</td><td>{{selection.swatch}}</td></tr><tr><td>Arms</td><td>{{selection.arms}}</td></tr><tr><td>Base</td><td>{{selection.base}}</td></tr></tbody></table><form class="u-full-width u-cf"><div class="row"><div class="six columns"><label>Full Name</label><input type="url" ng-model="swatchUrl" placeholder="Enter URL" class="u-full-width"/></div><div class="six columns"><label>Email</label><input type="url" ng-model="swatchUrl" placeholder="test@mailbox.com" class="u-full-width"/></div></div><div class="row"><button ng-click="closeMe()" class="button-primary">Submit</button><button ng-click="closeMe()">Cancel</button></div></form></div></div>');
}]);

},{}]},{},[2]);
